{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/robson/projetos/rocketseat/nlw4/react/moveit-next/src/contexts/CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengeContext } from \"./ChallengesContext\";\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet countdownTimeout;\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengeContext);\n  const starInMinute = 25;\n  const {\n    0: time,\n    1: setTime\n  } = useState(starInMinute * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  let countdownTimeout;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(starInMinute * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n      value: {\n        minutes,\n        seconds,\n        hasFinished,\n        isActive,\n        startCountdown,\n        resetCountdown\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["/home/robson/projetos/rocketseat/nlw4/react/moveit-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengeContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","starInMinute","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;AAAA,SACEA,aADF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,gBAAT,QAAiC,qBAAjC;AAeA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAiE;AACtE,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,gBAAD,CAAxC;AAEA,QAAMM,YAAY,GAAG,EAArB;AAEA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAACO,YAAY,GAAG,EAAhB,CAAhC;AACA,QAAM;AAAA,OAACG,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACY,WAAD;AAAA,OAAcC;AAAd,MAAgCb,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMc,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;AAEA,MAAIL,gBAAJ;;AAEA,WAASe,cAAT,GAA0B;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAACjB,gBAAD,CAAZ;AACAQ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAACF,YAAY,GAAG,EAAhB,CAAP;AACAM,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAEDd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBL,MAAAA,gBAAgB,GAAGkB,UAAU,CAAC,MAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,IAAI,CAAxB,EAA2B;AAChCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAL,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACI,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE;AAAA,2BACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,MAAA,KAAK,EAAE;AACLM,QAAAA,OADK;AAELG,QAAAA,OAFK;AAGLL,QAAAA,WAHK;AAILF,QAAAA,QAJK;AAKLQ,QAAAA,cALK;AAMLC,QAAAA;AANK,OADT;AAAA,gBAUGd;AAVH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAgBD","sourcesContent":["import {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { ChallengeContext } from \"./ChallengesContext\";\n\ninterface CountdownContextData {\n  minutes: number;\n  seconds: number;\n  hasFinished: boolean;\n  isActive: boolean;\n  startCountdown: () => void;\n  resetCountdown: () => void;\n}\n\ninterface CountdownProviderProps {\n  children: ReactNode;\n}\n\nexport const CountdownContext = createContext({} as CountdownContextData);\n\nlet countdownTimeout: NodeJS.Timeout;\n\nexport function CountdownProvider({ children }: CountdownProviderProps) {\n  const { startNewChallenge } = useContext(ChallengeContext);\n\n  const starInMinute = 25;\n\n  const [time, setTime] = useState(starInMinute * 60);\n  const [isActive, setIsActive] = useState(false);\n  const [hasFinished, setHasFinished] = useState(false);\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  let countdownTimeout: NodeJS.Timeout;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(starInMinute * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  return (\n    <>\n      <CountdownContext.Provider\n        value={{\n          minutes,\n          seconds,\n          hasFinished,\n          isActive,\n          startCountdown,\n          resetCountdown,\n        }}\n      >\n        {children}\n      </CountdownContext.Provider>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}