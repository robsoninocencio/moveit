{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/robson/projetos/rocketseat/nlw4/react/moveit-next/src/contexts/CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengeContext } from \"./ChallengesContext\";\nexport var CountdownContext = /*#__PURE__*/createContext({});\nvar countdownTimeout;\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengeContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var starInMinute = 0.05;\n\n  var _useState = useState(starInMinute * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n  var countdownTimeout;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(starInMinute * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n      value: {\n        minutes: minutes,\n        seconds: seconds,\n        hasFinished: hasFinished,\n        isActive: isActive,\n        startCountdown: startCountdown,\n        resetCountdown: resetCountdown\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(CountdownProvider, \"LnQVsLQoy/0BkzCBBNk0pbbgmsQ=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["/home/robson/projetos/rocketseat/nlw4/react/moveit-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengeContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","starInMinute","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;;AAAA,SACEA,aADF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,gBAAT,QAAiC,qBAAjC;AAeA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,oBACxCP,UAAU,CAACG,gBAAD,CAD8B;AAAA,MAC9DK,iBAD8D,eAC9DA,iBAD8D;;AAGtE,MAAMC,YAAY,GAAG,IAArB;;AAHsE,kBAK9CP,QAAQ,CAACO,YAAY,GAAG,EAAhB,CALsC;AAAA,MAK/DC,IAL+D;AAAA,MAKzDC,OALyD;;AAAA,mBAMtCT,QAAQ,CAAC,KAAD,CAN8B;AAAA,MAM/DU,QAN+D;AAAA,MAMrDC,WANqD;;AAAA,mBAOhCX,QAAQ,CAAC,KAAD,CAPwB;AAAA,MAO/DY,WAP+D;AAAA,MAOlDC,cAPkD;;AAStE,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;AAEA,MAAIL,gBAAJ;;AAEA,WAASe,cAAT,GAA0B;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAACjB,gBAAD,CAAZ;AACAQ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAACF,YAAY,GAAG,EAAhB,CAAP;AACAM,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAEDd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBL,MAAAA,gBAAgB,GAAGkB,UAAU,CAAC,YAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,IAAI,CAAxB,EAA2B;AAChCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAL,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACI,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE;AAAA,2BACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,MAAA,KAAK,EAAE;AACLM,QAAAA,OAAO,EAAPA,OADK;AAELG,QAAAA,OAAO,EAAPA,OAFK;AAGLL,QAAAA,WAAW,EAAXA,WAHK;AAILF,QAAAA,QAAQ,EAARA,QAJK;AAKLQ,QAAAA,cAAc,EAAdA,cALK;AAMLC,QAAAA,cAAc,EAAdA;AANK,OADT;AAAA,gBAUGd;AAVH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAgBD;;GArDeD,iB;;KAAAA,iB","sourcesContent":["import {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { ChallengeContext } from \"./ChallengesContext\";\n\ninterface CountdownContextData {\n  minutes: number;\n  seconds: number;\n  hasFinished: boolean;\n  isActive: boolean;\n  startCountdown: () => void;\n  resetCountdown: () => void;\n}\n\ninterface CountdownProviderProps {\n  children: ReactNode;\n}\n\nexport const CountdownContext = createContext({} as CountdownContextData);\n\nlet countdownTimeout: NodeJS.Timeout;\n\nexport function CountdownProvider({ children }: CountdownProviderProps) {\n  const { startNewChallenge } = useContext(ChallengeContext);\n\n  const starInMinute = 0.05;\n\n  const [time, setTime] = useState(starInMinute * 60);\n  const [isActive, setIsActive] = useState(false);\n  const [hasFinished, setHasFinished] = useState(false);\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  let countdownTimeout: NodeJS.Timeout;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(starInMinute * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  return (\n    <>\n      <CountdownContext.Provider\n        value={{\n          minutes,\n          seconds,\n          hasFinished,\n          isActive,\n          startCountdown,\n          resetCountdown,\n        }}\n      >\n        {children}\n      </CountdownContext.Provider>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}