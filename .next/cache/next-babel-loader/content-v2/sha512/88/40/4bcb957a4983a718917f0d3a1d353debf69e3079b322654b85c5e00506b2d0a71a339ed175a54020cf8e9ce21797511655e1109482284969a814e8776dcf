{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/robson/projetos/rocketseat/nlw4/react/moveit-next/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nexport var ChallengeContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengeContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"lIgE7IFKF0067ZYEERnSVPjxmqw=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/robson/projetos/rocketseat/nlw4/react/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","ChallengeContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","levelUp"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AA4BA,OAAO,IAAMC,gBAAgB,gBAAGF,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASG,kBAAT,OAAkE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,kBAC7CH,QAAQ,CAAC,CAAD,CADqC;AAAA,MAChEI,KADgE;AAAA,MACzDC,QADyD;;AAAA,mBAErBL,QAAQ,CAAC,CAAD,CAFa;AAAA,MAEhEM,iBAFgE;AAAA,MAE7CC,oBAF6C;;AAAA,mBAGjBP,QAAQ,CAAC,CAAD,CAHS;AAAA,MAGhEQ,mBAHgE;AAAA,MAG3CC,sBAH2C;;AAKvE,WAASC,OAAT,GAAmB;AACjBL,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAK,EAALA,KAAF;AAASE,MAAAA,iBAAiB,EAAjBA,iBAAT;AAA4BE,MAAAA,mBAAmB,EAAnBA,mBAA5B;AAAiDE,MAAAA,OAAO,EAAPA;AAAjD,KADT;AAAA,cAGGP;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAhBeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useState } from \"react\";\n\ninterface Challenge {\n  type: \"body\" | \"eye\";\n  description: string;\n  amount: number;\n}\n\ninterface ChallengeContextData {\n  level: number;\n  currentExperience: number;\n  experienceToNextLevel: number;\n  challengesCompleted: number;\n  activeChallenge: Challenge;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  resetChallenge: () => void;\n  completeChallenge: () => void;\n  closeLevelUpModal: () => void;\n}\n\ninterface ChallengeProviderProps {\n  children: ReactNode;\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;\n}\n\nexport const ChallengeContext = createContext({});\n\nexport function ChallengesProvider({ children }: ChallengeProviderProps) {\n  const [level, setLevel] = useState(1);\n  const [currentExperience, setCurrentExperience] = useState(0);\n  const [challengesCompleted, setChallengesCompleted] = useState(0);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  return (\n    <ChallengeContext.Provider\n      value={{ level, currentExperience, challengesCompleted, levelUp }}\n    >\n      {children}\n    </ChallengeContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}